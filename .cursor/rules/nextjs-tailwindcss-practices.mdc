---
description: 
globs: 
alwaysApply: true
---
# Next.js与TailwindCSS最佳实践

## Next.js 15特性

### 应用路由器（App Router）
- 项目使用App Router（[src/app/](mdc:src/app)目录），而非Pages Router
- 页面组件默认为服务器组件，除非显式添加`"use client"`指令
- 所有与Tauri API交互的组件必须标记为客户端组件（`"use client"`）

### 静态导出限制
由于使用Tauri，项目配置为静态导出（[next.config.ts](mdc:next.config.ts)中的`output: "export"`），以下功能不可用：
- 服务器端渲染（SSR）
- 增量静态再生（ISR）
- 服务器组件的动态功能
- 路由处理程序（Route Handlers）
- 中间件（Middleware）
- 动态API路由

### 图片处理
- 使用`next/image`组件时已配置为`unoptimized: true`
- 这意味着图像不会自动优化，需要自行确保图像已优化

## TailwindCSS 4.x指南

### 类命名规范
- 使用TailwindCSS提供的原子类
- 按照以下顺序组织类名：布局 > 定位 > 显示 > 尺寸 > 间距 > 样式 > 文字 > 交互

```tsx
// 推荐类名排序方式
<div className="flex items-center justify-between p-4 mt-2 bg-gray-100 text-sm hover:bg-gray-200">
  {/* 内容 */}
</div>
```

### 组件抽象
- 对于重复使用的UI模式，创建可复用组件而不是复制粘贴类名
- 使用props传递变体，避免大量条件类名

```tsx
// 推荐的组件抽象方式
type ButtonProps = {
  variant?: "primary" | "secondary";
  size?: "sm" | "md" | "lg";
  children: React.ReactNode;
} & React.ButtonHTMLAttributes<HTMLButtonElement>;

export function Button({ 
  variant = "primary", 
  size = "md", 
  children, 
  ...props 
}: ButtonProps) {
  const baseClasses = "rounded font-medium";
  const variantClasses = {
    primary: "bg-blue-600 text-white hover:bg-blue-700",
    secondary: "bg-gray-200 text-gray-800 hover:bg-gray-300",
  };
  const sizeClasses = {
    sm: "px-3 py-1 text-sm",
    md: "px-4 py-2",
    lg: "px-6 py-3 text-lg",
  };
  
  return (
    <button 
      className={`${baseClasses} ${variantClasses[variant]} ${sizeClasses[size]}`}
      {...props}
    >
      {children}
    </button>
  );
}
```

### 暗色模式支持
- 项目应支持暗色模式，使用TailwindCSS的`dark:`前缀配置暗色模式样式

